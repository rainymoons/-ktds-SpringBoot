<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ktdsuniversity.edu.hello_spring.member.dao.MemberDao">

	<resultMap type="com.ktdsuniversity.edu.hello_spring.member.vo.MemberVO"
				id="memberVOMap"
				autoMapping="true">
		<id column="EMAIL" property="email" />
		
		<collection property="authority"
					ofType="com.ktdsuniversity.edu.hello_spring.member.vo.AuthorityVO"
					autoMapping="true">
			<id column="AUTHORITY_NAME" property="authorityName" />
			<id column="ROLE" property="roleName" />
		</collection>
	</resultMap>
	
	<insert id="insertNewMember" parameterType="com.ktdsuniversity.edu.hello_spring.member.vo.RegistMemberVO">
		INSERT INTO MEMBERS
         (EMAIL
        , NAME
        , PASSWORD
        , SALT
        , LOGIN_FAIL_COUNT)
        VALUES
         (#{email}
        , #{name}
        , #{password}
        , #{salt}
        , 0)
	</insert>

	<select id="selectEmailCount" parameterType="string" resultType="_int">
		SELECT COUNT(1)
          FROM MEMBERS
         WHERE EMAIL = #{_parameter} 
	</select>

	<select id="selectSalt" parameterType="string" resultType="string">
		SELECT SALT
          FROM MEMBERS
         WHERE EMAIL = #{_parameter} 
	</select>
	
	<!-- "selectOneMember"와 동일한 쿼리지만 password는 제외함. -->
	<select id="selectMemberByEmail" 
			parameterType="String" resultMap="memberVOMap">
		SELECT M.EMAIL
		     , M.NAME
		     , M.PASSWORD
		     , M.SALT
		     , M.LOGIN_FAIL_COUNT
		     , TO_CHAR(M.LATEST_LOGIN_FAIL_DATE, 'YYYY-MM-DD HH24:MI:SS') LATEST_LOGIN_FAIL_DATE
		     , M.LATEST_LOGIN_IP
		     , TO_CHAR(M.LATEST_LOGIN_SUCCESS_DATE, 'YYYY-MM-DD HH24:MI:SS') LATEST_LOGIN_SUCCESS_DATE
		     , M.ROLE
		     , A.AUTHORITY_NAME
		     , M.PROVIDER
		     , M.PICTURE
		  FROM MEMBERS M
		 INNER JOIN AUTHORITY A
		    ON M.ROLE = A.ROLE_NAME
		 WHERE M.EMAIL = #{_parameter} 
	</select>	

	<update id="updateLoginFailState" parameterType="com.ktdsuniversity.edu.hello_spring.member.vo.LoginMemberVO">
		UPDATE MEMBERS
           SET LOGIN_FAIL_COUNT = LOGIN_FAIL_COUNT + 1
             , LATEST_LOGIN_FAIL_DATE = SYSDATE 
             , LATEST_LOGIN_IP = #{ip}
         WHERE EMAIL = #{email}
	</update>

	<select id="selectLoginImpossibleCount" parameterType="string" resultType="_int">
		SELECT COUNT(1) 
          FROM MEMBERS
         WHERE EMAIL = #{_parameter}
           AND LOGIN_FAIL_COUNT >= 5
           AND LATEST_LOGIN_FAIL_DATE BETWEEN SYSDATE -1/24 AND SYSDATE
	</select>

	<update id="updateLoginSuccessState" parameterType="com.ktdsuniversity.edu.hello_spring.member.vo.LoginMemberVO">
		UPDATE MEMBERS 
           SET LOGIN_FAIL_COUNT = 0
             , LATEST_LOGIN_FAIL_DATE = NULL 
             , LATEST_LOGIN_IP = #{ip}
             , LATEST_LOGIN_SUCCESS_DATE = SYSDATE
         WHERE EMAIL = #{email}
	</update>

	<delete id="deleteOneMember" parameterType="string">
		DELETE 
		  FROM MEMBERS 
		 WHERE EMAIL = #{_parameter}
	</delete>

    <update id="mergeMember" 
            parameterType="com.ktdsuniversity.edu.hello_spring.member.vo.MemberVO">
        MERGE INTO MEMBERS M
        USING (/* 데이터 존재 여부를 파악하기 위해 조인이 필요할 경우 작성. */ SELECT 1 FROM DUAL ) D
           ON (/* USING에 작성했던 인라인뷰와 조인 규칙 설정 */ M.EMAIL = #{email})
         WHEN MATCHED THEN
           /* ON에서 정의한 조건에 해당되는 ROW가 있을 경우. */
           UPDATE 
              SET NAME = #{name}
                , PROVIDER = #{provider}
         WHEN NOT MATCHED THEN
           /* ON에서 정의한 조건에 해당되는 ROW가 없을 경우. */
           INSERT 
                ( EMAIL
		        , NAME
		        , PASSWORD
		        , SALT
		        , LOGIN_FAIL_COUNT
		        , ROLE
		        , PROVIDER)
            VALUES
		        ( #{email}
		        , #{name}
		        , #{password}
		        , #{salt}
		        , 0
		        , #{role}
		        , #{provider})
    </update>

</mapper>
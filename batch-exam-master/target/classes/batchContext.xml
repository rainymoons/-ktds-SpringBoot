<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <context:annotation-config />
    <!-- 
    	 Component-scan : base-package 이하에 존재하는 모든 클래스 중에서, 스프링 빈으로 등록될 클래스들을 찾아서
    	 				  스프링 빈으로 생성하고 스프링 빈 컨테이너에 등록시킨다.
    	 				  <context:annotation-config /> 설정이 함께 있을 때 자동으로 빈 생성 및 등록이 이루어진다.
    	 				  <context:annotation-config /> 설정이 없으면 자동으로 빈 생성 및 등록을 하지 않는다.
    	 				  스프링 부트는 내부적으로 이러한 설정들이 적용되어 있음. (얘는 legacy)
   	-->
    <context:component-scan base-package="com.ktdsuniversity.edu" />
	
	<!-- DB 설정 : 배치 프로그램이 접속할 데이터베이스의 정보를 설정한다. -->
    <bean id="dataSource"
          class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
        <property name="url" value="jdbc:oracle:thin:@localhost:1521:XE" />
        <property name="username" value="SPRING_BOOT" />
        <property name="password" value="1234" />
        <!-- <property name="maxActive" value="15" /> 동접자 수가 100만이 넘지 않으면 10개로 충분. max는 20개 -->
    </bean>

	<!-- Transaction 설정 : 트랜잭션이 설정되는 대상은 dataSource 빈으로 한다. -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        
        <!-- DataSourceTransactionManager 클래스에 있는 setDataSource를 호출하는데, 파라미터는 DataSource Bean을 전달한다. -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <!-- 트랜잭션이 대상이 되는 규칙을 설정한다.
    	 트랜잭션을 처리하는 빈의 이름은 transactionAdvice가 되고, 트랜잭션을 처리하는 빈(인스턴스)은 transactionManager가 된다. -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        
        <!-- 트랜잭션의 대상이 되는 메서드의 이름별로 롤백 규칙을 설정한다. -->
        <tx:attributes>
        	<!-- 메서드의 이름이 find로 시작하는 경우 select만 허용한다. (read-only="true") -->
            <tx:method name="find*" read-only="true"/>
            <!-- Update로 시작하는 메서드에서 RuntimeException이 던져질 경우 롤백한다. -->
            <tx:method name="update*" rollback-for="RuntimeException" />
            <!-- modify로 시작하는 메서드에서 RuntimeException이 던져질 경우 롤백한다. -->
            <tx:method name="modify*" rollback-for="RuntimeException" />
            <!-- remove로 시작하는 메서드에서 RuntimeException이 던져질 경우 롤백한다. -->
            <tx:method name="remove*" rollback-for="RuntimeException" />
            <!-- delete로 시작하는 메서드에서 RuntimeException이 던져질 경우 롤백한다. -->
            <tx:method name="delete*" rollback-for="RuntimeException" />
            <!-- insert로 시작하는 메서드에서 RuntimeException이 던져질 경우 롤백한다. -->
            <tx:method name="insert*" rollback-for="RuntimeException" />
            <!-- create로 시작하는 메서드에서 RuntimeException이 던져질 경우 롤백한다. -->
            <tx:method name="create*" rollback-for="RuntimeException" />
            <!-- regist로 시작하는 메서드에서 RuntimeException이 던져질 경우 롤백한다. -->
            <tx:method name="regist*" rollback-for="RuntimeException" />
        </tx:attributes>
    </tx:advice>
    
    <!-- Spring AOP를 이용해서 트랜잭션을 수행하도록 설정하는 부분 -->
    <aop:config>
    	<!-- 트랜잭션의 대상이 되는 클래스와 메서드를 지정한다. -->
        <aop:pointcut expression="execution(public * com.ktdsuniversity..service.*Service.*(..))" 
                      id="transactionPointCut"/>
        
        <!-- 트랜잭션의 규칙(transactionAdvice)을 PointCut에 지정한다. -->  
        <aop:advisor advice-ref="transactionAdvice"
                     pointcut-ref="transactionPointCut"/>
    </aop:config>
    
    <!-- MyBatis가 접속할 데이터소스(데이터베이스)를 지정하는 부분. --> 
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- SqlSessionFactoryBean에 name과 같은 setter들이 있음 -->
        <property name="dataSource" ref="dataSource" />
        <!-- MyBatis의 Mapper 파일의 위치를 지정한다. -->
        <property name="mapperLocations" value="classpath:com/ktdsuniversity/edu/batch/**/dao/mapper/*.xml" />
        <!-- MyBatis의 설정 파일의 위치를 지정한다. -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>
    
    <!-- MyBatis의 insert, delete, select, selectOne, selectList 등의 메서드를 가진 클래스를 스프링 빈으로 등록한다. -->
    <bean id="sqlSessionTemplate"
          class="org.mybatis.spring.SqlSessionTemplate">
        <!-- SqlSessionTemplate 클래스의 생성자를 실행하는데 파라미터로 sqlSessionFactory 빈을 전달한다. -->
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>
</beans>
